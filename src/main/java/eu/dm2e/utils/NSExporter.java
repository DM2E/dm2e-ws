package eu.dm2e.utils;

import java.io.StringWriter;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;

import org.joda.time.DateTime;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.gson.JsonObject;
import com.hp.hpl.jena.ontology.ObjectProperty;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.ontology.Ontology;
import com.hp.hpl.jena.rdf.model.ModelFactory;

import eu.dm2e.ws.NS;
import eu.dm2e.ws.NS.OWLAnnotation;

/**
 * Utility class for exposing class constants and enum values to JSON.
 *
 * @see eu.dm2e.ws.NS
 *
 * @author Konstantin Baierer
 */
public class NSExporter {
	
	public static String exportInnerClassConstantsToJSON(Class clazz) {
		
		JsonObject nsObj = new JsonObject();
		
		Class[] listOfInnerClasses = clazz.getDeclaredClasses();
		
		for (Class innerClass : listOfInnerClasses) {
			JsonObject innerClassObj = new JsonObject();
			nsObj.add(innerClass.getSimpleName(), innerClassObj);
			Field[] listOfFields = innerClass.getFields();
			for (Field field : listOfFields) {
				if (! Modifier.isStatic(field.getModifiers())
//						||
//					! Modifier.isStatic(field.getModifiers())
////						||
//					field.getName().equals("BASE")
//						||
//					! (
//						field.getName().startsWith("PROP_")
//							||
//						field.getName().startsWith("CLASS_")
//					  )
					)
					continue;
				try {
					innerClassObj.addProperty(field.getName(), (String)field.get(null));
				} catch (Exception e) {
					throw new RuntimeException(e);
				}
			}
		}
		return nsObj.toString();
	}
	
	public static String exportStaticClassToOWL(String outputPath, String base, Class cls) throws IllegalArgumentException, IllegalAccessException {
		Logger log = LoggerFactory.getLogger(NSExporter.class);
		
		OntModel m = ModelFactory.createOntologyModel(OntModelSpec.OWL_DL_MEM);
		Ontology ont = m.createOntology(base);
		ont.setComment("Generated by " + NSExporter.class.getName() + " on " + DateTime.now(), "en");
		
		Field[] listOfFields = cls.getFields();
		for (Field field : listOfFields) {
			if (field.getAnnotations().length == 0) { 
				log.debug("No annotations, skipping " + field);
				continue;
			} else if (!field.isAnnotationPresent(NS.OWLAnnotation.class)) {
				log.debug("No OWLAnnotation, skipping " + field);
				continue;
			}
			log.debug("Current field: " + field);
			OWLAnnotation owlAnno = field.getAnnotation(NS.OWLAnnotation.class);
			switch (owlAnno.owlType()) {
			case NS.OWL.CLASS:
				OntClass fieldCls = m.createClass((String) field.get(null));
				fieldCls.addComment(owlAnno.description(), "en");
				break;
			case NS.OWL.OBJECT_PROPERTY:
				ObjectProperty fieldProp = m.createObjectProperty((String) field.get(null));
				fieldProp.addComment(owlAnno.description(), "en");
				if (! "".equals(owlAnno.domain()))
					fieldProp.setDomain(m.createResource(owlAnno.domain()));
				if (! "".equals(owlAnno.range()))
					fieldProp.setRange(m.createResource(owlAnno.range()));
				break;
			}
		}
		StringWriter sw = new StringWriter();
		m.write(sw, "RDF/XML-ABBREV", base);
		return sw.toString();
	}
	
//	public static void main(String[] args) {
////		String x = exportInnerClassConstantsToJSON(NS.class);
////		String x = exportEnumToJSON(JobStatus.class);
////		System.out.println(x);
////		System.out.println(
//				
//	}

	public static String exportEnumToJSON(Class clazz) {
		if (! clazz.isEnum()) {
			return "{}";
		}
		JsonObject enumObj = new JsonObject();
		for (Field field : clazz.getDeclaredFields()) {
			if (! field.isEnumConstant()) {
				continue;
			}
			enumObj.addProperty(field.getName(), field.getName());
		}
		return enumObj.toString();
	}

}
